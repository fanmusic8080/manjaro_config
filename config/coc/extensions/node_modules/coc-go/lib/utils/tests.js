"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const coc_nvim_1 = require("coc.nvim");
const cp = require("child_process");
const tools_1 = require("./tools");
const binaries_1 = require("../binaries");
////////////////////////////////////////////////////////////////////////////////
function generateTestsAll(document) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (isTest(document)) {
            coc_nvim_1.workspace.showMessage("Document is a test file", "error");
            return;
        }
        (yield runGotests(document, ["-all"])) && (yield openTests(document));
    });
}
exports.generateTestsAll = generateTestsAll;
function generateTestsExported(document) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (isTest(document)) {
            coc_nvim_1.workspace.showMessage("Document is a test file", "error");
            return;
        }
        (yield runGotests(document, ["-exported"])) && (yield openTests(document));
    });
}
exports.generateTestsExported = generateTestsExported;
function toogleTests(document) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const targetURI = isTest(document)
            ? sourceURI(document)
            : testURI(document);
        return coc_nvim_1.workspace.openResource(targetURI);
    });
}
exports.toogleTests = toogleTests;
////////////////////////////////////////////////////////////////////////////////
function openTests(document) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        return coc_nvim_1.workspace.openResource(testURI(document));
    });
}
function isTest(document) {
    return document.uri.endsWith('_test.go');
}
function testURI(document) {
    return document.uri.replace(/(_test)?\.go$/, '_test.go');
}
function sourceURI(document) {
    return document.uri.replace(/(_test)?\.go$/, '.go');
}
function runGotests(document, args) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const config = coc_nvim_1.workspace.getConfiguration().get('go.tests', {});
        args.push(...(config.generateFlags || []), '-w', document.uri.replace(/^file:\/\//, ''));
        const gotests = yield tools_1.goBinPath(binaries_1.GOTESTS);
        return new Promise((resolve, reject) => {
            cp.execFile(gotests, args, { env: {} }, (err, stdout, stderr) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (err) {
                    coc_nvim_1.workspace.showMessage(`Error: ${stderr}`, "error");
                    return reject();
                }
                coc_nvim_1.workspace.showMessage(stdout || "");
                resolve(true);
            }));
        });
    });
}
//# sourceMappingURL=tests.js.map