"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var shvl = tslib_1.__importStar(require("shvl"));
var completion_1 = require("./handles/completion");
var hover_1 = require("./handles/hover");
var completionResolve_1 = require("./handles/completionResolve");
var signatureHelp_1 = require("./handles/signatureHelp");
var documents_1 = require("./server/documents");
var connection_1 = require("./server/connection");
var parser_1 = require("./server/parser");
var builtin_1 = require("./server/builtin");
var config_1 = tslib_1.__importDefault(require("./server/config"));
var definition_1 = require("./handles/definition");
var references_1 = require("./handles/references");
var rename_1 = require("./handles/rename");
// lsp initialize
connection_1.connection.onInitialize(function (param) {
    var _a = param.initializationOptions, initializationOptions = _a === void 0 ? {} : _a;
    var iskeyword = initializationOptions.iskeyword, runtimepath = initializationOptions.runtimepath, vimruntime = initializationOptions.vimruntime, diagnostic = initializationOptions.diagnostic, suggest = initializationOptions.suggest, indexes = initializationOptions.indexes;
    var runtimepaths = runtimepath ? runtimepath.split(',') : [];
    // config by user's initializationOptions
    var conf = {
        iskeyword: iskeyword || '',
        runtimepath: runtimepaths,
        vimruntime: (vimruntime || '').trim(),
        diagnostic: tslib_1.__assign({ enable: true }, (diagnostic || {})),
        snippetSupport: shvl.get(param, 'capabilities.textDocument.completion.completionItem.snippetSupport'),
        suggest: tslib_1.__assign({ fromRuntimepath: false, fromVimruntime: true }, (suggest || {})),
        indexes: tslib_1.__assign({ runtimepath: true, gap: 100, count: 1 }, (indexes || {}))
    };
    // init config
    config_1.default.init(conf);
    // init builtin docs
    builtin_1.builtinDocs.init();
    return {
        capabilities: {
            textDocumentSync: documents_1.documents.syncKind,
            hoverProvider: true,
            completionProvider: {
                triggerCharacters: ['.', ':', '#', '[', '&', '$', '<', '"', "'"],
                resolveProvider: true
            },
            signatureHelpProvider: {
                triggerCharacters: ['(', ',']
            },
            definitionProvider: true,
            referencesProvider: true,
            renameProvider: {
                prepareProvider: true
            }
        }
    };
});
// document change or open
documents_1.documents.onDidChangeContent(function (change) {
    parser_1.next(change.document);
});
documents_1.documents.onDidClose(function (evt) {
    parser_1.unsubscribe(evt.document);
});
// listen for document's open/close/change
documents_1.documents.listen(connection_1.connection);
// handle completion
connection_1.connection.onCompletion(completion_1.completionProvider);
// handle completion resolve
connection_1.connection.onCompletionResolve(completionResolve_1.completionResolveProvider);
// handle signaturehelp
connection_1.connection.onSignatureHelp(signatureHelp_1.signatureHelpProvider);
// handle hover
connection_1.connection.onHover(hover_1.hoverProvider);
// handle definition request
connection_1.connection.onDefinition(definition_1.definitionProvider);
// handle references
connection_1.connection.onReferences(references_1.referencesProvider);
// handle rename
connection_1.connection.onPrepareRename(rename_1.prepareProvider);
connection_1.connection.onRenameRequest(rename_1.renameProvider);
// lsp start
connection_1.connection.listen();
//# sourceMappingURL=index.js.map