"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const fs_1 = tslib_1.__importDefault(require("fs"));
const child_process_1 = require("child_process");
const coc_nvim_1 = require("coc.nvim");
const which_1 = tslib_1.__importDefault(require("which"));
const config_1 = require("./config");
////////////////////////////////////////////////////////////////////////////////
function installGoBin(source, force = false) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const name = goBinName(source);
        if (!force && (yield goBinExists(name))) {
            return true;
        }
        const statusItem = coc_nvim_1.workspace.createStatusBarItem(90, { progress: true });
        statusItem.text = `Installing '${name}'`;
        statusItem.show();
        const success = yield goRun(`get -u ${source}`);
        if (success) {
            coc_nvim_1.workspace.showMessage(`Installed '${name}'`);
        }
        else {
            coc_nvim_1.workspace.showMessage(`Failed to install '${name}'`, 'error');
        }
        statusItem.hide();
        return success;
    });
}
exports.installGoBin = installGoBin;
function goBinPath(source) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const name = goBinName(source);
        return path_1.default.join(yield config_1.configDir('bin'), name);
    });
}
exports.goBinPath = goBinPath;
function runGoTool(name, args = []) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const bin = yield goBinPath(name);
        return new Promise((resolve) => { child_process_1.spawn(bin, args).on('close', (code) => resolve(code)); });
    });
}
exports.runGoTool = runGoTool;
function commandExists(command) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve) => { which_1.default(command, (err) => resolve(err == null)); });
    });
}
exports.commandExists = commandExists;
////////////////////////////////////////////////////////////////////////////////
function goBinExists(source) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const name = goBinName(source);
        const bin = yield goBinPath(name);
        return new Promise((resolve) => fs_1.default.open(bin, 'r', (err) => resolve(err === null)));
    });
}
function goRun(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const gopath = yield config_1.configDir('tools');
        const gobin = yield config_1.configDir('bin');
        const cmd = `env GOBIN=${gobin} GOPATH=${gopath} go ${args}`;
        try {
            yield coc_nvim_1.workspace.runCommand(cmd, gopath);
        }
        catch (ex) {
            coc_nvim_1.workspace.showMessage(ex);
            return false;
        }
        return true;
    });
}
function goBinName(source) {
    return source.replace(/\/\.\.\.$/, '').split('/').pop();
}
//# sourceMappingURL=tools.js.map